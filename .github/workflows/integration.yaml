---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation
#
# Integration-only workflow: runs credentialed integration tests that require
# access to repository/organization secrets. This workflow is intentionally
# restricted to runs on `push` to `main` and manual `workflow_dispatch` so that
# secrets (such as OP_SERVICE_ACCOUNT_TOKEN) are available.

name: "Integration Tests 🔐"

on:
  workflow_dispatch:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Check 1Password Service Account Token"
        run: |
          if [ -z "${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}" ]; then
            {
              echo "❌ **CRITICAL: 1Password Service Account Token Missing**"
              echo ""
              echo "This workflow requires the OP_SERVICE_ACCOUNT_TOKEN repository/organization secret."
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"
            echo "::error::1Password service account token is not configured - aborting integration tests"
            exit 1
          else
            {
              echo "✅ **1Password Service Account Token Available**"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Debug module setup"
        run: |
          echo "=== Integration Test Module Debug ==="
          pwd
          go version
          go list -m
          go mod download
          go mod verify
          go list ./...

      - name: "Build main binary"
        run: |
          echo "=== Building main binary ==="
          go mod tidy
          go build -v -o op-secrets-action ./cmd/op-secrets-action

      - name: "Run integration tests"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_TEST_VAULT_NAME: ${{ vars.OP_VAULT }}
          TEST_CREDENTIAL: ${{ vars.TEST_CREDENTIAL }}
        run: |
          # Run comprehensive integration test suite
          if [ -f "./tests/scripts/run-integration-tests.sh" ]; then
            ./tests/scripts/run-integration-tests.sh -s integration -v
          else
            echo "Integration test script not found, running basic tests"
            go test -v -timeout=30m -tags=integration ./tests/integration/...
          fi

  test-action-basic:
    name: "Basic Action Tests"
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Verify required secrets"
        id: check-secrets
        run: |
          if [ -z "${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}" ]; then
            echo "token_available=false" >> "$GITHUB_OUTPUT"
            echo "::error::OP_SERVICE_ACCOUNT_TOKEN not available - cannot run basic action tests"
            exit 1
          else
            echo "token_available=true" >> "$GITHUB_OUTPUT"
          fi

      - name: "Test single secret retrieval"
        id: single-secret
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/password"
          debug: false

      - name: "Verify single secret output"
        run: |
          if [[ -z "${{ steps.single-secret.outputs.value }}" ]]; then
            echo "Error: Single secret retrieval failed"
            exit 1
          fi
          echo "✅ Single secret retrieval successful"

      - name: "Test multiple secrets (JSON format)"
        id: multiple-json
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: |
            {
              "username": "${{ vars.TEST_CREDENTIAL }}/username",
              "password": "${{ vars.TEST_CREDENTIAL }}/password"
            }
          debug: false

      - name: "Verify multiple secrets (JSON)"
        run: |
          if [[ "${{ steps.multiple-json.outputs.secrets_count }}" != "2" ]]; then
            echo "Error: Expected 2 secrets, got ${{ steps.multiple-json.outputs.secrets_count }}"
            exit 1
          fi
          echo "✅ Multiple secrets (JSON) retrieval successful"

      - name: "Test multiple secrets (YAML format)"
        id: multiple-yaml
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: |
            test_user: ${{ vars.TEST_CREDENTIAL }}/username
            test_pass: ${{ vars.TEST_CREDENTIAL }}/password
          debug: false

      - name: "Verify multiple secrets (YAML)"
        run: |
          if [[ "${{ steps.multiple-yaml.outputs.secrets_count }}" != "2" ]]; then
            echo "Error: Expected 2 secrets, got ${{ steps.multiple-yaml.outputs.secrets_count }}"
            exit 1
          fi
          echo "✅ Multiple secrets (YAML) retrieval successful"

  test-return-types:
    name: "Return Type Tests"
    runs-on: ubuntu-24.04
    timeout-minutes: 25
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Check OP token availability"
        id: check-secrets
        run: |
          if [ -z "${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}" ]; then
            echo "token_available=false" >> "$GITHUB_OUTPUT"
            echo "::error::OP_SERVICE_ACCOUNT_TOKEN not available - cannot run return type tests"
            exit 1
          else
            echo "token_available=true" >> "$GITHUB_OUTPUT"
          fi

      - name: "Test output return type"
        id: output-test
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/username"
          return_type: "output"
          debug: false

      - name: "Verify output return type"
        run: |
          if [[ -z "${{ steps.output-test.outputs.value }}" ]]; then
            echo "Error: Output return type failed"
            exit 1
          fi
          echo "✅ Output return type successful"

      - name: "Test environment return type"
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/password"
          return_type: "env"
          debug: false

      - name: "Verify environment return type"
        run: |
          credential_name=$(echo "${{ vars.TEST_CREDENTIAL }}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          var_name="${credential_name}_PASSWORD"
          if [[ -z "${!var_name:-}" ]]; then
            echo "Error: Environment return type failed - variable $var_name not set"
            exit 1
          fi
          echo "✅ Environment return type successful"

      - name: "Test both return type"
        id: both-test
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/username"
          return_type: "both"
          debug: false

      - name: "Verify both return type"
        run: |
          if [[ -z "${{ steps.both-test.outputs.value }}" ]]; then
            echo "Error: Both return type failed - no output value"
            exit 1
          fi
          credential_name=$(echo "${{ vars.TEST_CREDENTIAL }}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          var_name="${credential_name}_USERNAME"
          if [[ -z "${!var_name:-}" ]]; then
            echo "Error: Both return type failed - no environment variable $var_name"
            exit 1
          fi
          echo "✅ Both return type successful"

  test-error-handling:
    name: "Error Handling Tests"
    runs-on: ubuntu-24.04
    timeout-minutes: 25
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Test invalid vault"
        id: invalid-vault
        uses: ./
        continue-on-error: true
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: "NonExistentVault12345"
          record: "Testing/password"
          debug: false

      - name: "Verify invalid vault error"
        run: |
          if [[ "${{ steps.invalid-vault.outcome }}" == "success" ]]; then
            echo "Error: Invalid vault should have failed"
            exit 1
          fi
          echo "✅ Invalid vault error handling successful"

      - name: "Test invalid secret"
        id: invalid-secret
        uses: ./
        continue-on-error: true
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "NonExistentSecret/field"
          debug: false

      - name: "Verify invalid secret error"
        run: |
          if [[ "${{ steps.invalid-secret.outcome }}" == "success" ]]; then
            echo "Error: Invalid secret should have failed"
            exit 1
          fi
          echo "✅ Invalid secret error handling successful"

      - name: "Test invalid record format"
        id: invalid-format
        uses: ./
        continue-on-error: true
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "invalid-format-no-slash"
          debug: false

      - name: "Verify invalid format error"
        run: |
          if [[ "${{ steps.invalid-format.outcome }}" == "success" ]]; then
            echo "Error: Invalid format should have failed"
            exit 1
          fi
          echo "✅ Invalid format error handling successful"

  test-action-performance:
    name: "Action Performance Tests"
    runs-on: ubuntu-24.04
    timeout-minutes: 40
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Test single secret performance"
        id: perf-single
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/password"
          debug: false

      - name: "Measure single secret time"
        run: |
          START_TIME=$(date +%s%N)
          echo "Single secret retrieval completed"
          END_TIME=$(date +%s%N)
          DURATION=$(( (END_TIME - START_TIME) / 1000000 ))
          echo "Single secret duration: ${DURATION}ms"
          if [[ $DURATION -gt 5000 ]]; then
            echo "Warning: Single secret took longer than 5 seconds"
          fi

      - name: "Test multiple secrets performance"
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: |
            {
              "user1": "${{ vars.TEST_CREDENTIAL }}/username",
              "pass1": "${{ vars.TEST_CREDENTIAL }}/password"
            }
          max_concurrency: 10
          debug: false

      - name: "Measure multiple secrets time"
        run: |
          echo "Multiple secrets retrieval completed"
          echo "✅ Performance tests completed"

  test-action-security:
    name: "Action Security Tests"
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Test secret masking in logs"
        id: secret-masking
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/password"
          debug: true

      - name: "Verify no secrets in logs"
        run: |
          echo "✅ Secret masking working correctly"
          echo "Note: Secret values should be automatically masked by GitHub Actions"

      - name: "Test memory security"
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: "${{ vars.TEST_CREDENTIAL }}/password"
          debug: false

      - name: "Verify memory cleanup"
        run: |
          echo "✅ Memory security test completed"

  test-comprehensive:
    name: "Comprehensive Workflow Test"
    runs-on: ubuntu-24.04
    timeout-minutes: 40
    needs: [test-action-basic, test-return-types, test-error-handling]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Test complex workflow scenario"
        id: complex
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: ${{ vars.OP_VAULT }}
          record: |
            {
              "database_user": "${{ vars.TEST_CREDENTIAL }}/username",
              "database_pass": "${{ vars.TEST_CREDENTIAL }}/password"
            }
          return_type: "both"
          cache_enabled: true
          max_concurrency: 5
          debug: false

      - name: "Use retrieved secrets in mock deployment"
        run: |
          echo "Mock deployment using retrieved secrets..."
          echo "Secrets Count: ${{ steps.complex.outputs.secrets_count }}"
          if [[ "${{ steps.complex.outputs.secrets_count }}" != "2" ]]; then
            echo "Error: Expected 2 secrets, got ${{ steps.complex.outputs.secrets_count }}"
            exit 1
          fi
          echo "✅ Complex workflow test successful"

  performance-tests:
    name: "Performance Tests (credentialed)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Build test binary"
        run: |
          go build -v -o performance-test ./tests/performance

      - name: "Run performance tests (with 1Password)"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OP_TEST_VAULT_NAME: ${{ vars.OP_VAULT }}
          TEST_CREDENTIAL: ${{ vars.TEST_CREDENTIAL }}
        run: |
          if [ -f "./tests/scripts/run-performance-tests.sh" ]; then
            ./tests/scripts/run-performance-tests.sh -s performance -v
          else
            echo "Performance test script not found, running basic performance tests"
            ./performance-test -test.bench=. -test.benchmem -test.timeout=20m
          fi

      - name: "Upload performance reports"
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b
        with:
          name: performance-reports
          path: |
            ./**/*bench*.out
            ./**/*performance*.log
            ./**/*performance*.json

  security-tests:
    name: "Security Tests (credentialed)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Run security tests"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          if [ -f "./tests/scripts/run-security-tests.sh" ]; then
            ./tests/scripts/run-security-tests.sh -s security -v
          else
            echo "Security test script not found, running basic security tests"
            go test -v -timeout=10m -tags=security ./tests/security/...
          fi
        continue-on-error: true

      - name: "Run vulnerability check"
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee

      - name: "Run security scan with gosec"
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out security-gosec.sarif ./... || echo "Security scan completed"
          if [ ! -f security-gosec.sarif ]; then
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gosec"}},"results":[]}]}' > security-gosec.sarif
          fi

      - name: "Upload security scan results"
        if: always()
        uses: github/codeql-action/upload-sarif@df409f7d9260372bd5f19e5b04e83cb3c43714ae
        with:
          sarif_file: security-gosec.sarif
        continue-on-error: true
