---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation
#
# 1Password Secrets Action test/validation workflow (core tests)
# This workflow has been trimmed to exclude credentialed integration tests
# which are moved to `.github/workflows/integration.yaml`. The trimmed
# testing workflow runs on PRs and pushes as before but avoids attempting
# to access repository/organization secrets when secrets are not available.

name: "Core Tests 🧪"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

# yamllint disable rule:line-length

jobs:
  ### Security Checks ###
  security-checks:
    name: "Security Checks"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: "Run gosec security scanner"
        run: |
          # Pre-create SARIF file to avoid upload failures even if gosec installation or execution fails
          echo '{"version":"2.1.0","'\$'schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec"}},"results":[]}]}'> gosec.sarif
          # Install gosec using the official module path
          go install github.com/securego/gosec/v2/cmd/gosec@latest || true
          # Run gosec and overwrite SARIF with scan results if successful
          gosec -fmt sarif -out gosec.sarif ./... || echo "gosec scan completed with issues"
          # Ensure SARIF file exists (already pre-created above)
          test -f gosec.sarif || echo '{"version":"2.1.0","'\$'schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec"}},"results":[]}]}'> gosec.sarif
        continue-on-error: true

      - name: "Upload gosec results"
        uses: github/codeql-action/upload-sarif@df409f7d9260372bd5f19e5b04e83cb3c43714ae # v3.27.6
        if: always()
        with:
          sarif_file: gosec.sarif
        continue-on-error: true

  ### Core Unit Tests (internal/pkg packages only) ###
  functional-tests:
    name: "Functional Tests"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    timeout-minutes: 15
    continue-on-error: ${{ matrix.go-version != '1.25' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Debug module setup"
        run: |
          echo "=== Functional Tests Module Debug ==="
          pwd
          go version
          go list -m
          go mod download
          go mod verify
          go list ./...

      - name: "Download dependencies"
        run: go mod download

      - name: "Verify Go module"
        run: |
          go mod verify
          go mod tidy

      - name: "Run functional tests (without race detector)"
        run: |
          echo "Temporarily disabling GitHub command processing during unit tests"
          echo "::stop-commands::pause_masking"
          # Write JSON to a file; summarize failures at the end
          go test -json -coverprofile coverage.out -covermode=atomic -timeout=10m ./internal/... ./pkg/... \
            | tee tests.json | jq -r 'select(.Action=="fail" and .Test!=null) | "FAIL " + .Package + " :: " + .Test'
          test_exit=${PIPESTATUS[0]}
          echo "::pause_masking::"
          exit "$test_exit"
        shell: bash

      - name: "Upload functional unit test JSON log"
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: unit-tests-json-${{ matrix.os }}-${{ matrix.go-version }}
          path: tests.json
          retention-days: 7

      - name: "Generate coverage report"
        run: |
          go tool cover -html coverage.out -o coverage.html

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        with:
          files: coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  ### Race Detection Tests ###
  race-detection-tests:
    name: "Race Detection Tests"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    timeout-minutes: 30
    needs: functional-tests
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Download dependencies"
        run: go mod download

      - name: "Run race detection tests"
        env:
          SKIP_RACE_COMPATIBILITY_TEST: "false"
        run: |
          echo "Temporarily disabling GitHub command processing during race detection tests"
          echo "::stop-commands::pause_masking"
          go test -race -v -timeout=20m ./internal/... ./pkg/...
          exit_code=$?
          echo "::pause_masking::"
          if [ $exit_code -ne 0 ]; then
            echo "Race detection tests failed - this is informational"
            echo "::warning::Race conditions detected in code"
            exit 0
          fi
        shell: bash

      - name: "Upload race detection results"
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: race-detection-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: |
            ./**/*_race_*.log
            ./**/*race*.out
          retention-days: 7

  ### Build Tests ###
  build-test:
    name: "Build Tests"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        arch: [amd64, arm64]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: "Debug module setup"
        run: |
          echo "=== Module Debug Info ==="
          pwd
          ls -la
          go version
          go list -m
          go list -m -f '{{.Dir}}'
          echo "=== Internal packages ==="
          ls -la internal/
          echo "=== Testing module resolution ==="
          go mod download
          go mod verify
          go list ./internal/...

      - name: "Build for target architecture"
        env:
          GOOS: ${{ runner.os == 'Linux' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          echo "Building for ${GOOS}/${GOARCH}"
          echo "=== Pre-build checks ==="
          go mod tidy
          go list ./cmd/op-secrets-action
          echo "=== Building ==="
          go build -v -o "op-secrets-action-${GOOS}-${GOARCH}" ./cmd/op-secrets-action
          ls -la op-secrets-action-*

      - name: "Test binary execution (if compatible)"
        if: matrix.arch == 'amd64' || (matrix.arch == 'arm64' && runner.arch == 'ARM64')
        shell: bash
        run: |
          for binary in ./op-secrets-action-*; do
            if [ -f "$binary" ]; then
              "$binary" --help || echo "Binary execution test completed"
              break
            fi
          done

  ### Main Package Functional Tests ###
  main-package-functional-tests:
    name: "Main Package Functional Tests"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    timeout-minutes: 20
    continue-on-error: ${{ matrix.go-version != '1.25' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Debug module setup"
        run: |
          echo "=== Main Package Tests Module Debug ==="
          pwd
          go version
          go list -m
          go mod download
          go mod verify
          go list ./...

      - name: "Download dependencies"
        run: go mod download

      - name: "Run main package tests"
        run: |
          echo "Temporarily disabling GitHub command processing during main package tests"
          echo "::stop-commands::pause_masking"
          # Write JSON to a file; summarize failures at the end
          go test -json -timeout=15m ./cmd/... \
            | tee main-tests.json | jq -r 'select(.Action=="fail" and .Test!=null) | "FAIL " + .Package + " :: " + .Test'
          test_exit=${PIPESTATUS[0]}
          echo "::pause_masking::"
          exit "$test_exit"
        shell: bash

      - name: "Upload main package test results"
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: main-package-functional-test-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: |
            main-tests.json
            ./**/*_test.log
            ./**/*test*.out
          retention-days: 7

  ### Main Package Race Detection Tests ###
  main-package-race-detection-tests:
    name: "Main Package Race Detection Tests"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    timeout-minutes: 30
    needs: main-package-functional-tests
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        go-version: ['1.23', '1.24', '1.25']
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setup Go"
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: "Download dependencies"
        run: go mod download

      - name: "Run main package race detection tests"
        env:
          SKIP_RACE_COMPATIBILITY_TEST: "false"
        run: |
          echo "Temporarily disabling GitHub command processing during main package race detection tests"
          echo "::stop-commands::pause_masking"
          go test -race -v -timeout=20m ./cmd/...
          exit_code=$?
          echo "::pause_masking::"
          if [ $exit_code -ne 0 ]; then
            echo "Main package race detection tests failed - this is informational"
            echo "::warning::Race conditions detected in main package"
            exit 0
          fi
        shell: bash

      - name: "Upload main package race detection results"
        if: always()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: main-package-race-detection-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: ./**/*race*.out
          retention-days: 7

  ### Test Result Summary ###
  test-summary:
    name: "Test Summary"
    runs-on: ubuntu-latest
    needs: [
      security-checks,
      functional-tests,
      race-detection-tests,
      build-test,
      main-package-functional-tests,
      main-package-race-detection-tests
    ]
    if: always()
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Generate test summary"
        run: |
          {
            echo "# Test Results"
            echo ""
            echo "## Core Test Results"
            echo "- Security Checks: ${{ needs.security-checks.result }}"
            echo "- Functional Tests: ${{ needs.functional-tests.result }}"
            echo "- Race Detection Tests: ${{ needs.race-detection-tests.result }} (informational)"
            echo "- Build Tests: ${{ needs.build-test.result }}"
            echo "- Main Package Functional Tests: ${{ needs.main-package-functional-tests.result }}"
            echo "- Main Package Race Detection Tests: ${{ needs.main-package-race-detection-tests.result }} (informational)"
            echo ""
            echo "## Integration & Credentialed Tests"
            echo "- Credentialed integration tests (those that require access to OP_SERVICE_ACCOUNT_TOKEN) were moved to a separate workflow:"
            echo '  .github/workflows/integration.yaml'
            echo '  This workflow runs on pushes to "main" and can be manually triggered via "workflow_dispatch".'
            echo ""
            echo "## Notes on 1Password integration"
            echo "- Credentialed tests that use real 1Password credentials will run in the integration workflow only."
            echo "- This prevents attempts to access repository/organization secrets during pull request runs where secrets are restricted."
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # Determine overall status (core)
          if [[ "${{ needs.functional-tests.result }}" == "success" && \
                "${{ needs.build-test.result }}" == "success" && \
                "${{ needs.security-checks.result }}" == "success" ]]; then
            {
              echo "## Overall Status: ✅ PASSING"
              echo "Core functionality is working correctly across supported platforms."
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "## Overall Status: ❌ FAILING"
              echo "Core functionality has issues that need to be addressed."
            } >> "$GITHUB_STEP_SUMMARY"
          fi
